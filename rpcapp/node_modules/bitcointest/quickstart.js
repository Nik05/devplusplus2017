const assert = require('assert');

const { BitcoinNet, Node, BitcoinGraph } = require('./index');
net = new BitcoinNet('../bitcoin-main/src', '/tmp/bitcointest/', 22001, 22002);
graph = new BitcoinGraph(net);
try {
console.log('launching');
const nodes = net.launchBatchS(4);
const [ n1, n2, n3, n4 ] = nodes;
console.log('waiting');
net.waitForNodesS(nodes, 20000);
console.log('merging');
net.mergeS(nodes);
for (const n of nodes) {
    let a;
    if (n.port === n1.port) a = 'n1';
    if (n.port === n2.port) a = 'n2';
    if (n.port === n3.port) a = 'n3';
    if (n.port === n4.port) a = 'n4';
    console.log(a);
}
console.log('current connection matrix:');
graph.printConnectionMatrix(nodes);
n1.generateBlocksS(1);
n2.generateBlocksS(110);
console.log(`n3.balance (before) = ${n3.getBalanceS()}`);
n2.sendToNodeS(n3, 100);
n2.generateBlocksS(6);
net.syncS(nodes, 10000);
console.log(`n3.balance (after) = ${n3.getBalanceS()}`);

const [ n12, n34 ] = net.partitionS(nodes, 2);
const n1addr = n1.getNewAddressS();
const n4addr = n4.getNewAddressS();
const utxo = n2.findSpendableOutputS(1);
n2.shareAddressWithNodeS(n3, utxo.address, true);
console.log(`n1 addr: ${n1addr}`);
console.log(`n4 addr: ${n4addr}`);
console.log(`utxo:    addr=${utxo.address}, amount=${utxo.amount}`);
const n1PreBalance = n1.getBalanceS();
const txid = n2.spendUTXOS(utxo, n1addr, 1);
console.log(`n2->n1 txid = ${txid}`);
n1.waitForTransactionS(txid);
n2.generateBlocksS(6);
n1.waitForBalanceChangeS(n1PreBalance);
const n1PostBalance = n1.getBalanceS();
console.log(`n1 balance +${n1PostBalance - n1PreBalance}: pre=${n1PreBalance}, post=${n1PostBalance}`);
console.log('block chain state:');
console.log('  n1+n2           n3+n4');
net.syncS(n12);
graph.printBlockChainsS(n12, n34);
const n4PreBalance = n4.getBalanceS();
const txid2 = n3.spendUTXOS(utxo, n4addr, 1);
console.log(`n3->n4 txid = ${txid2}`);
n4.waitForTransactionS(txid2);
n3.generateBlocksS(6);
n4.waitForBalanceChangeS(n4PreBalance);
const n4PostBalance = n4.getBalanceS();
console.log(`n4 balance +${n4PostBalance - n4PreBalance}: pre=${n4PreBalance}, post=${n4PostBalance}`);
console.log('block chain state:');
console.log('  n1+n2           n3+n4');
net.syncS(n34);
graph.printBlockChainsS(n12, n34);
net.mergeS(nodes);
n3.generateBlocksS(1);
net.syncS(nodes);
// show block chain state
console.log('block chain state after merge/sync:');
graph.printBlockChainsS(n12, n34);
// n1 balance should have gone back to unchanged
const n1FinalBalance = n1.getBalanceS();
const n4FinalBalance = n4.getBalanceS();
console.log(`n1 final balance = ${n1FinalBalance} (starting balance ${n1PreBalance})`);
console.log(`n4 final balance = ${n4FinalBalance} (starting balance ${n4PreBalance})`);

} catch (e) {
    net.shutdownS();
    throw e;
}
net.shutdownS();
process.exit();
